import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
  View,
  StyleSheet,
  ScrollView,
  Text,
  TextInput,
  TouchableOpacity,
  Alert,
  FlatList,
  KeyboardAvoidingView,
  Platform,
  SafeAreaView,
  Dimensions,
  PermissionsAndroid,
  AppState,
} from 'react-native';
import { Link, Stack } from 'expo-router';
import { useTheme } from '@/context/ThemeContext';
import { useRouter } from 'expo-router';
import { ArrowLeft, PenTool, Mic, Play, Pause, Square, X } from 'lucide-react-native';
import { Audio } from 'expo-av';
import type { JournalEntry } from '@/types/journal';
import { 
  loadJournalEntries, 
  saveJournalEntries, 
  deleteJournalEntry, 
  saveAudioFile 
} from '@/lib/journalStorage';

// Predefined categories for journal entries
const JOURNAL_CATEGORIES = [
  'Focus Level',
  'Food', 
  'Mood',
  'Meds',
  'Sleep',
  'YAY'
] as const;

type JournalCategory = typeof JOURNAL_CATEGORIES[number];

// Mock theme object
const theme = {
  colors: {
    primary: '#007bff',
    secondary: '#6c757d',
    danger: '#dc3545',
    success: '#28a745',
    background: '#f0f0f0',
    text: '#333',
    lightGray: '#d3d3d3',
    white: '#ffffff',
    cardBackground: '#ffffff',
    inputBorder: '#ced4da',
  },
  spacing: { xs: 4, s: 8, m: 16, l: 24, xl: 32 },
  fontSize: { title: 24, large: 20, body: 16, label: 14, small: 12 },
  borderRadius: { s: 4, m: 8, l: 12 }
};

// --- Mock Local Storage ---
let MOCK_JOURNAL_STORAGE: JournalEntry[] = [];

const loadEntriesFromStorage = async (): Promise<JournalEntry[]> => {
  return new Promise(resolve => setTimeout(() => resolve([...MOCK_JOURNAL_STORAGE]), 50));
};

const saveEntriesToStorage = async (entries: JournalEntry[]): Promise<void> => {
  return new Promise(resolve => {
    setTimeout(() => {
      MOCK_JOURNAL_STORAGE = [...entries];
      resolve();
    }, 50);
  });
};

// --- UI Components ---
const CustomButton = (props: { title: string; onPress: () => void; type?: 'primary' | 'danger' | 'success' | 'secondary'; style?: object }) => {
  const buttonStyle = StyleSheet.flatten([
    styles.buttonBase,
    props.type === 'danger' ? styles.dangerButton :
    props.type === 'success' ? styles.successButton :
    props.type === 'secondary' ? styles.secondaryButton :
    styles.primaryButton,
    props.style
  ]);

  return (
    <TouchableOpacity
      style={buttonStyle}
      onPress={props.onPress}
    >
      <Text style={styles.buttonText}>{props.title}</Text>
    </TouchableOpacity>
  );
};

// Memoized TextInput component to prevent re-renders
const MemoizedTextInput = React.memo(({ 
  value, 
  onChangeText, 
  style 
}: { 
  value: string; 
  onChangeText: (text: string) => void; 
  style: any; 
}) => (
  <TextInput
    style={style}
    placeholder="Write your thoughts, observations, or notes..."
    value={value}
    onChangeText={onChangeText}
    multiline
    numberOfLines={6}
    autoFocus
    textAlignVertical="top"
    scrollEnabled={false}
    blurOnSubmit={false}
    returnKeyType="default"
    maxLength={1000}
    enablesReturnKeyAutomatically={false}
    autoCapitalize="sentences"
    autoCorrect={true}
    spellCheck={true}
    autoComplete="off"
    textContentType="none"
    keyboardType="default"
  />
));

// Memoized inline entry container to prevent re-renders
const MemoizedInlineEntry = React.memo(({
  currentContent,
  selectedTags,
  onContentChange,
  onTagToggle,
  onClearTags,
  onCancel,
  onSave,
  styles,
  colors,
  JOURNAL_CATEGORIES
}: {
  currentContent: string;
  selectedTags: JournalCategory[];
  onContentChange: (text: string) => void;
  onTagToggle: (tag: JournalCategory) => void;
  onClearTags: () => void;
  onCancel: () => void;
  onSave: () => void;
  styles: any;
  colors: any;
  JOURNAL_CATEGORIES: readonly JournalCategory[];
}) => (
  <View style={styles.inlineEntryContainer}>
    <View style={styles.textInputWrapper}>
      <MemoizedTextInput
        value={currentContent}
        onChangeText={onContentChange}
        style={styles.inlineTextInput}
      />
    </View>
    <View style={styles.tagSelectionContainer}>
      <Text style={styles.tagSelectionTitle}>Categories (up to 4):</Text>
      <View style={styles.tagGrid}>
        {JOURNAL_CATEGORIES.map((tag) => (
          <TouchableOpacity
            key={tag}
            style={[
              styles.tagButton,
              selectedTags.includes(tag) && styles.tagButtonSelected
            ]}
            onPress={() => onTagToggle(tag)}
          >
            <Text style={[
              styles.tagButtonText,
              selectedTags.includes(tag) && styles.tagButtonTextSelected
            ]}>
              {tag}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
      {selectedTags.length > 0 && (
        <TouchableOpacity
          style={styles.clearTagsButton}
          onPress={onClearTags}
        >
          <Text style={styles.clearTagsButtonText}>Clear All</Text>
        </TouchableOpacity>
      )}
    </View>
    <View style={styles.inlineEntryActions}>
      <TouchableOpacity 
        style={[styles.inlineActionButton, styles.cancelButton]}
        onPress={onCancel}
      >
        <Text style={[styles.inlineActionButtonText, styles.cancelButtonText]}>Cancel</Text>
      </TouchableOpacity>
      <TouchableOpacity 
        style={styles.inlineActionButton}
        onPress={onSave}
      >
        <Text style={styles.inlineActionButtonText}>Save</Text>
      </TouchableOpacity>
    </View>
  </View>
));

// --- Journal Screen Component ---
export default function JournalScreen() {
  const { colors } = useTheme();
  const router = useRouter();
  const [entries, setEntries] = useState<JournalEntry[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedEntry, setSelectedEntry] = useState<JournalEntry | null>(null);
  
  // Audio recording state
  const [recording, setRecording] = useState<Audio.Recording | null>(null);
  const [isRecording, setIsRecording] = useState(false);
  const [recordingDuration, setRecordingDuration] = useState(0);
  const [recordingTimer, setRecordingTimer] = useState<NodeJS.Timeout | null>(null);
  const [audioPermissionStatus, setAudioPermissionStatus] = useState<'granted' | 'denied' | 'undetermined' | 'checking'>('checking');
  
  // Entry creation state
  const [showEntryInput, setShowEntryInput] = useState(false);
  const [entryMode, setEntryMode] = useState<'text' | 'audio'>('text');
  const [currentContent, setCurrentContent] = useState('');
  const [selectedTags, setSelectedTags] = useState<JournalCategory[]>([]);

  const isWeb = Platform.OS === 'web';
  const windowWidth = Dimensions.get('window').width;

  // Memoized handlers to prevent re-renders
  const handleContentChange = useCallback((text: string) => {
    setCurrentContent(text);
  }, []);

  const handleTagToggle = useCallback((tag: JournalCategory) => {
    if (selectedTags.includes(tag)) {
      setSelectedTags(prev => prev.filter(t => t !== tag));
    } else if (selectedTags.length < 4) {
      setSelectedTags(prev => [...prev, tag]);
    } else {
      Alert.alert('Maximum Tags', 'You can select up to 4 categories.');
    }
  }, [selectedTags]);

  const handleClearTags = useCallback(() => {
    setSelectedTags([]);
  }, []);

  const handleDeleteEntry = async (entryId: string) => {
    Alert.alert(
      'Delete Entry',
      'Are you sure you want to delete this journal entry?',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            const updatedEntries = entries.filter(entry => entry.id !== entryId);
            await saveData(updatedEntries);
          }
        }
      ]
    );
  };

  const styles = StyleSheet.create({
    container: {
      flex: 1,
      alignItems: isWeb ? 'center' : undefined,
      justifyContent: isWeb ? 'flex-start' : undefined,
    },
    inner: {
      flex: 1,
      width: isWeb ? Math.min(windowWidth * 0.9, 1200) : '100%',
      maxWidth: isWeb ? 1200 : '100%',
      alignSelf: isWeb ? 'center' : 'stretch',
      backgroundColor: isWeb ? 'rgba(255,255,255,0.95)' : colors.background,
      borderRadius: isWeb ? 24 : 0,
      marginTop: isWeb ? 32 : 0,
      marginBottom: isWeb ? 32 : 0,
      marginLeft: isWeb ? 80 : 0,
      overflow: 'hidden',
    },
    header: {
      padding: 16,
      paddingTop: 8,
      flexDirection: 'row',
      alignItems: 'center',
      width: '100%',
    },
    headerContent: {
      flexDirection: 'row',
      alignItems: 'center',
      flex: 1,
    },
    backButton: {
      marginRight: 12,
      padding: 4,
    },
    title: {
      fontSize: 24,
      fontWeight: 'bold',
      color: colors.text,
    },
    entryCard: {
      padding: 16,
      borderRadius: 12,
      marginBottom: 16,
      marginHorizontal: 16,
      borderWidth: 1,
      borderColor: colors.border,
      backgroundColor: colors.background,
    },
    entryHeader: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      alignItems: 'center',
      marginBottom: 8,
    },
    entryType: {
      flexDirection: 'row',
      alignItems: 'center',
    },
    entryTimestamp: {
      fontSize: 12,
      color: colors.textSecondary,
      marginLeft: 8,
    },
    entryContent: {
      fontSize: 16,
      color: colors.text,
      lineHeight: 24,
      marginBottom: 12,
    },
    tagsContainer: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      marginBottom: 12,
    },
    tagDisplay: {
      backgroundColor: colors.primary + '20',
      paddingHorizontal: 8,
      paddingVertical: 4,
      borderRadius: 12,
      marginRight: 8,
      marginBottom: 4,
    },
    tagDisplayText: {
      fontSize: 12,
      color: colors.primary,
      fontWeight: '500',
    },
    entryActions: {
      flexDirection: 'row',
      justifyContent: 'flex-end',
    },
    actionButton: {
      paddingHorizontal: 12,
      paddingVertical: 6,
      borderRadius: 6,
      marginLeft: 8,
    },
    deleteButton: {
      backgroundColor: colors.error + '20',
    },
    actionButtonText: {
      fontSize: 12,
      color: colors.error,
      fontWeight: '500',
    },
    emptyState: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      padding: 32,
    },
    emptyText: {
      fontSize: 16,
      color: colors.textSecondary,
      textAlign: 'center',
      marginTop: 16,
      lineHeight: 24,
    },
    // New Entry Section Styles
    newEntryContainer: {
      padding: 16,
      borderBottomWidth: 1,
      borderBottomColor: colors.border,
    },
    buttonRow: {
      flexDirection: 'row',
      marginBottom: 8,
    },
    newEntryButton: {
      flex: 1,
      padding: 16,
      borderRadius: 12,
      alignItems: 'center',
      marginHorizontal: 4,
    },
    buttonText: {
      fontSize: 16,
      fontWeight: 'bold',
    },
    permissionIndicator: {
      flexDirection: 'row',
      alignItems: 'center',
      justifyContent: 'center',
      marginTop: 8,
    },
    permissionIndicatorText: {
      fontSize: 12,
      marginLeft: 4,
    },
    // Inline Entry Input Styles
    inlineEntryContainer: {
      padding: 16,
      borderBottomWidth: 1,
      borderBottomColor: colors.border,
      backgroundColor: colors.card,
    },
    textInputWrapper: {
      marginBottom: 16,
    },
    inlineTextInput: {
      borderWidth: 1,
      borderColor: colors.border,
      borderRadius: 8,
      padding: 12,
      fontSize: 16,
      color: colors.text,
      backgroundColor: colors.background,
      minHeight: 120,
      textAlignVertical: 'top',
    },
    tagSelectionContainer: {
      marginBottom: 16,
    },
    tagSelectionTitle: {
      fontSize: 16,
      fontWeight: 'bold',
      marginBottom: 8,
      color: colors.text,
    },
    tagGrid: {
      flexDirection: 'row',
      flexWrap: 'wrap',
      marginBottom: 8,
    },
    tagButton: {
      paddingHorizontal: 12,
      paddingVertical: 8,
      borderRadius: 6,
      borderWidth: 1,
      borderColor: colors.border,
      marginRight: 8,
      marginBottom: 8,
    },
    tagButtonSelected: {
      backgroundColor: colors.primary + '20',
      borderColor: colors.primary,
    },
    tagButtonText: {
      fontSize: 14,
      color: colors.text,
    },
    tagButtonTextSelected: {
      color: colors.primary,
      fontWeight: 'bold',
    },
    clearTagsButton: {
      paddingHorizontal: 12,
      paddingVertical: 8,
      borderRadius: 6,
      borderWidth: 1,
      borderColor: colors.border,
      alignSelf: 'flex-start',
    },
    clearTagsButtonText: {
      fontSize: 14,
      color: colors.text,
    },
    inlineEntryActions: {
      flexDirection: 'row',
      justifyContent: 'flex-end',
      gap: 12,
    },
    inlineActionButton: {
      paddingHorizontal: 16,
      paddingVertical: 8,
      borderRadius: 6,
      backgroundColor: colors.primary,
    },
    cancelButton: {
      backgroundColor: colors.border,
    },
    inlineActionButtonText: {
      fontSize: 14,
      fontWeight: '600',
      color: colors.background,
    },
    cancelButtonText: {
      color: colors.text,
    },
    // Audio Recording Styles
    audioRecordingContainer: {
      alignItems: 'center',
      padding: 24,
      backgroundColor: colors.card,
      borderRadius: 12,
      marginBottom: 16,
    },
    recordingDuration: {
      fontSize: 24,
      fontWeight: 'bold',
      color: colors.text,
      marginBottom: 16,
    },
    recordingButton: {
      width: 64,
      height: 64,
      borderRadius: 32,
      backgroundColor: colors.error,
      justifyContent: 'center',
      alignItems: 'center',
      marginBottom: 16,
    },
    recordingStatus: {
      fontSize: 14,
      color: colors.textSecondary,
      textAlign: 'center',
    },
  });

  // Load entries on mount
  useEffect(() => {
    loadData();
    checkAudioPermissionStatus();
    
    const subscription = AppState.addEventListener('change', handleAppStateChange);
    return () => subscription?.remove();
  }, []);

  const handleAppStateChange = (nextAppState: string) => {
    if (nextAppState === 'background' && isRecording) {
      stopRecording();
    }
  };

  const loadData = async () => {
    try {
      const loadedEntries = await loadEntriesFromStorage();
      setEntries(loadedEntries);
    } catch (error) {
      console.error('Error loading journal entries:', error);
    } finally {
      setLoading(false);
    }
  };

  const saveData = async (newEntries: JournalEntry[]): Promise<void> => {
    try {
      await saveEntriesToStorage(newEntries);
      setEntries(newEntries);
    } catch (error) {
      console.error('Error saving journal entries:', error);
    }
  };

  const startTextEntry = () => {
    setSelectedEntry(null);
    setCurrentContent('');
    setEntryMode('text');
    setShowEntryInput(true);
  };

  const startAudioRecording = async () => {
    if (isWeb) {
      Alert.alert('Audio recording is not available on web');
      return;
    }

    const hasPermission = await requestAudioPermission();
    if (!hasPermission) {
      Alert.alert('Permission Denied', 'Microphone access is required for audio recording.');
      return;
    }

    try {
      await Audio.setAudioModeAsync({
        allowsRecordingIOS: true,
        playsInSilentModeIOS: true,
      });

      const { recording } = await Audio.Recording.createAsync(
        Audio.RecordingOptionsPresets.HIGH_QUALITY
      );

      setRecording(recording);
      setIsRecording(true);
      setRecordingDuration(0);
      setEntryMode('audio');
      setShowEntryInput(true);

      // Start timer
      const timer = setInterval(() => {
        setRecordingDuration(prev => prev + 1);
      }, 1000);
      setRecordingTimer(timer);

    } catch (error) {
      console.error('Failed to start recording:', error);
      Alert.alert('Recording Error', 'Failed to start audio recording.');
    }
  };

  const requestAudioPermission = async (): Promise<boolean> => {
    try {
      if (Platform.OS === 'android') {
        const granted = await PermissionsAndroid.request(
          PermissionsAndroid.PERMISSIONS.RECORD_AUDIO,
          {
            title: 'Microphone Permission',
            message: 'This app needs access to your microphone to record audio journal entries.',
            buttonNeutral: 'Ask Me Later',
            buttonNegative: 'Cancel',
            buttonPositive: 'OK',
          }
        );
        return granted === PermissionsAndroid.RESULTS.GRANTED;
      } else {
        const { status } = await Audio.requestPermissionsAsync();
        return status === 'granted';
      }
    } catch (error) {
      console.error('Error requesting audio permission:', error);
      return false;
    }
  };

  const stopRecording = async () => {
    if (!recording) return;

    try {
      await recording.stopAndUnloadAsync();
      const uri = recording.getURI();
      
      if (uri) {
        // Save the audio file
        const fileName = `journal_audio_${Date.now()}.m4a`;
        await saveAudioFile(uri, fileName);
        
        // Create journal entry
        const newEntry: JournalEntry = {
          id: Date.now().toString(),
          timestamp: new Date().toISOString(),
          type: 'audio',
          content: `Audio recording (${formatDuration(recordingDuration)})`,
          audioFile: uri,
          duration: recordingDuration,
          tags: selectedTags.length > 0 ? selectedTags : undefined,
        };

        const updatedEntries = [newEntry, ...entries];
        await saveData(updatedEntries);
      }
    } catch (error) {
      console.error('Error stopping recording:', error);
      Alert.alert('Recording Error', 'Failed to save audio recording.');
    } finally {
      setRecording(null);
      setIsRecording(false);
      setRecordingDuration(0);
      setShowEntryInput(false);
      setSelectedTags([]);
      
      if (recordingTimer) {
        clearInterval(recordingTimer);
        setRecordingTimer(null);
      }
    }
  };

  const saveTextEntry = async () => {
    if (!currentContent.trim()) {
      Alert.alert('Empty Entry', 'Please enter some content before saving.');
      return;
    }

    if (selectedTags.length > 4) {
      Alert.alert('Too Many Tags', 'Please select no more than 4 categories.');
      return;
    }

    const newEntry: JournalEntry = {
      id: Date.now().toString(),
      timestamp: new Date().toISOString(),
      type: 'text',
      content: currentContent.trim(),
      tags: selectedTags.length > 0 ? selectedTags : undefined,
    };

    const updatedEntries = [newEntry, ...entries];
    await saveData(updatedEntries);
    
    setShowEntryInput(false);
    setCurrentContent('');
    setSelectedTags([]);
  };

  const cancelEntry = () => {
    if (isRecording) {
      Alert.alert(
        'Recording in Progress',
        'Do you want to stop and discard the current recording?',
        [
          { text: 'Continue Recording', style: 'cancel' },
          { 
            text: 'Stop & Discard', 
            style: 'destructive',
            onPress: () => {
              if (recording) {
                recording.stopAndUnloadAsync();
              }
              setRecording(null);
              setIsRecording(false);
              setRecordingDuration(0);
              setShowEntryInput(false);
              setSelectedTags([]);
              
              if (recordingTimer) {
                clearInterval(recordingTimer);
                setRecordingTimer(null);
              }
            }
          }
        ]
      );
    } else {
      setShowEntryInput(false);
      setCurrentContent('');
      setSelectedTags([]);
    }
  };

  const formatTimestamp = (timestamp: string): string => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
    
    if (diffInHours < 1) {
      return 'Just now';
    } else if (diffInHours < 24) {
      return `${Math.floor(diffInHours)}h ago`;
    } else {
      return date.toLocaleDateString();
    }
  };

  const formatDuration = (seconds: number): string => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const renderEntryItem = ({ item }: { item: JournalEntry }) => (
    <View style={styles.entryCard}>
      <View style={styles.entryHeader}>
        <View style={styles.entryType}>
          {item.type === 'audio' ? (
            <Mic size={16} color={colors.primary} />
          ) : (
            <PenTool size={16} color={colors.primary} />
          )}
          <Text style={styles.entryTimestamp}>{formatTimestamp(item.timestamp)}</Text>
        </View>
        {item.duration && (
          <Text style={styles.entryTimestamp}>{formatDuration(item.duration)}</Text>
        )}
      </View>
      
      <Text style={styles.entryContent} numberOfLines={3}>
        {item.content}
      </Text>
      
      {/* Display tags if they exist */}
      {item.tags && item.tags.length > 0 && (
        <View style={styles.tagsContainer}>
          {item.tags.map((tag) => (
            <View key={tag} style={styles.tagDisplay}>
              <Text style={styles.tagDisplayText}>{tag}</Text>
            </View>
          ))}
        </View>
      )}
      
      <View style={styles.entryActions}>
        <TouchableOpacity 
          style={[styles.actionButton, styles.deleteButton]}
          onPress={() => handleDeleteEntry(item.id)}
        >
          <Text style={styles.actionButtonText}>Delete</Text>
        </TouchableOpacity>
      </View>
    </View>
  );

  // Web-only gradient wrapper
  const WebGradientWrapper = ({ children }: { children: React.ReactNode }) =>
    isWeb ? (
      <div style={{ 
        minHeight: '100vh', 
        width: '100vw', 
        background: 'linear-gradient(135deg, #d0f5e8 0%, #b3e0ff 100%)',
        overflow: 'auto'
      }}>
        {children}
      </div>
    ) : (
      <>{children}</>
    );

  const checkAudioPermissionStatus = async () => {
    if (isWeb) {
      setAudioPermissionStatus('denied');
      return;
    }

    try {
      if (Platform.OS === 'android') {
        const hasPermission = await PermissionsAndroid.check(
          PermissionsAndroid.PERMISSIONS.RECORD_AUDIO
        );
        setAudioPermissionStatus(hasPermission ? 'granted' : 'denied');
      } else {
        const { status } = await Audio.getPermissionsAsync();
        setAudioPermissionStatus(status);
      }
    } catch (error) {
      console.error('Error checking audio permission status:', error);
      setAudioPermissionStatus('denied');
    }
  };

  if (loading) {
    return (
      <WebGradientWrapper>
        <SafeAreaView style={[styles.container]}>
          <View style={styles.inner}>
            <View style={styles.emptyState}>
              <Text style={{ color: colors.text }}>Loading journal...</Text>
            </View>
          </View>
        </SafeAreaView>
      </WebGradientWrapper>
    );
  }

  return (
    <WebGradientWrapper>
      <KeyboardAvoidingView
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        style={{ flex: 1 }}
        keyboardVerticalOffset={Platform.OS === "ios" ? 0 : 20}
        enabled={!isWeb}
      >
        <SafeAreaView style={[styles.container]}>
          <View style={styles.inner}>
            <View style={styles.header}>
              <View style={styles.headerContent}>
                <TouchableOpacity 
                  style={styles.backButton}
                  onPress={() => router.back()}
                  accessibilityLabel="Go back"
                >
                  <ArrowLeft color={colors.text} size={24} />
                </TouchableOpacity>
                <Text style={styles.title}>Journal</Text>
              </View>
            </View>

            {/* Inline Entry Input */}
            {showEntryInput && (
              <>
                {entryMode === 'audio' && isRecording ? (
                  // Audio Recording Interface
                  <View style={styles.audioRecordingContainer}>
                    <Text style={styles.recordingDuration}>
                      {formatDuration(recordingDuration)}
                    </Text>
                    <TouchableOpacity 
                      style={styles.recordingButton}
                      onPress={stopRecording}
                    >
                      <Square size={32} color={colors.background} />
                    </TouchableOpacity>
                    <Text style={styles.recordingStatus}>
                      Tap the square to stop recording
                    </Text>
                  </View>
                ) : (
                  // Text Input Interface
                  <MemoizedInlineEntry
                    currentContent={currentContent}
                    selectedTags={selectedTags}
                    onContentChange={handleContentChange}
                    onTagToggle={handleTagToggle}
                    onClearTags={handleClearTags}
                    onCancel={cancelEntry}
                    onSave={saveTextEntry}
                    styles={styles}
                    colors={colors}
                    JOURNAL_CATEGORIES={JOURNAL_CATEGORIES}
                  />
                )}
              </>
            )}

            {/* New Entry Buttons - only show when not in entry input mode */}
            {!showEntryInput && (
              <View style={styles.newEntryContainer}>
                <View style={styles.buttonRow}>
                  <TouchableOpacity 
                    style={[styles.newEntryButton, { backgroundColor: colors.primary, flex: 1, marginRight: 8 }]} 
                    onPress={startTextEntry}
                  >
                    <Text style={[styles.buttonText, { color: colors.background }]}>New Text Entry</Text>
                  </TouchableOpacity>
                  
                  {!isWeb && (
                    <TouchableOpacity 
                      style={[
                        styles.newEntryButton, 
                        { 
                          backgroundColor: audioPermissionStatus === 'denied' ? colors.border : colors.card,
                          flex: 1,
                          marginLeft: 8
                        }
                      ]} 
                      onPress={startAudioRecording}
                      disabled={audioPermissionStatus === 'denied'}
                    >
                      <Text style={[
                        styles.buttonText, 
                        { 
                          color: audioPermissionStatus === 'denied' ? colors.textSecondary : colors.background 
                        }
                      ]}>Record Audio</Text>
                    </TouchableOpacity>
                  )}
                </View>
                
                {/* Microphone permission indicator for mobile */}
                {!isWeb && audioPermissionStatus === 'denied' && (
                  <View style={styles.permissionIndicator}>
                    <Mic size={16} color={colors.error} />
                    <Text style={styles.permissionIndicatorText}>No mic access</Text>
                  </View>
                )}
                
                {!isWeb && audioPermissionStatus === 'granted' && (
                  <View style={styles.permissionIndicator}>
                    <Mic size={16} color={colors.success} />
                    <Text style={styles.permissionIndicatorText}>Mic ready</Text>
                  </View>
                )}
              </View>
            )}

            {entries.length === 0 ? (
              <View style={styles.emptyState}>
                <PenTool size={48} color={colors.textSecondary} />
                <Text style={styles.emptyText}>
                  No journal entries yet.{'\n'}Tap "New Entry" to start tracking!
                </Text>
              </View>
            ) : (
              <FlatList
                data={entries}
                renderItem={renderEntryItem}
                keyExtractor={item => item.id}
                contentContainerStyle={{ paddingBottom: 20 }}
              />
            )}
          </View>
        </SafeAreaView>
      </KeyboardAvoidingView>
    </WebGradientWrapper>
  );
}

// --- Styles ---
const styles = StyleSheet.create({
  container: { flex: 1 },
  header: {
    padding: 16,
    paddingTop: 8,
    flexDirection: 'row',
    alignItems: 'center',
  },
  backButton: {
    marginRight: 16,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  centered: { flex: 1, justifyContent: 'center', alignItems: 'center', padding: theme.spacing.m },
  emptyText: { fontSize: theme.fontSize.body, color: theme.colors.secondary, textAlign: 'center' },
  listContentContainer: { padding: theme.spacing.m },
  createNewButton: { margin: theme.spacing.m },

  entryCard: {
    backgroundColor: theme.colors.cardBackground,
    borderRadius: theme.borderRadius.m,
    padding: theme.spacing.m,
    marginBottom: theme.spacing.m,
    ...(Platform.OS === 'web' 
      ? { boxShadow: '0px 1px 3px rgba(0, 0, 0, 0.1)' }
      : {
          shadowColor: '#000',
          shadowOffset: { width: 0, height: 1 },
          shadowOpacity: 0.1,
          shadowRadius: 3,
        }
    ),
  },
  entryTitle: { fontSize: theme.fontSize.large, fontWeight: 'bold', color: theme.colors.primary, marginBottom: theme.spacing.xs },
  entryDate: { fontSize: theme.fontSize.small, color: theme.colors.secondary, marginBottom: theme.spacing.s },
  entrySnippet: { fontSize: theme.fontSize.body, color: theme.colors.text, marginBottom: theme.spacing.s },
  entryActions: { flexDirection: 'row', justifyContent: 'flex-end', marginTop: theme.spacing.s },
  smallButton: { paddingVertical: theme.spacing.xs, paddingHorizontal: theme.spacing.s, marginLeft: theme.spacing.s, borderRadius: theme.borderRadius.s},

  buttonBase: { borderRadius: theme.borderRadius.m, paddingVertical: theme.spacing.m, paddingHorizontal: theme.spacing.m, alignItems: 'center', justifyContent: 'center', minWidth: 100 },
  primaryButton: { backgroundColor: theme.colors.primary },
  secondaryButton: { backgroundColor: theme.colors.secondary },
  dangerButton: { backgroundColor: theme.colors.danger },
  successButton: { backgroundColor: theme.colors.success },
  buttonText: { color: theme.colors.white, fontSize: theme.fontSize.body, fontWeight: 'bold' },
});
